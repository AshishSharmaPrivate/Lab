Infrastructure Monitoring using Prometheus and Grafana on AWS

Follow below steps to implement the micro service observability tech stack.

Set up a Sample Microservices Application(Deploy a demo app with multiple services (e.g., Banking App with balance-service, payment-service)
Enable Logging (Structured + Centralized)(NodeExporter + Prom + Grafana.)
Collect Metrics (Install Prometheus to scrape service metrics (expose /metrics endpoint with libraries like prometheus-client).)


Prerequisites
AWS Access
ASW CLI Installed
User account with sudo  privilege.
Prometheus system user and group.
Sufficient storage on your system and good internet connectivity.

...............................................

Lets start with the exercise.  

Set Up EC2 Instance in AWS Console (Navigate to ec2)
Click > Launch Instance > Provide Name > Select Ubuntu Image > Instance Type (t2.micro) > Create Key Pair > Create Security Group (Allow SSH Traffic) > Launch Instance   Ensure your EC2 instance is up and running:  Launch an EC2 Instance (Ubuntu).  Open Inbound Ports:
SSH (22)
Prometheus (9090)
Grafana (3000)
Payment Service (8001)
Balance Service (8001)

SSH to system:  

chmod 400 SRE_Demo.pem
ssh -i "sre_demo1.pem" ubuntu@ec2-<public-ip>.us-east-2.compute.amazonaws.com

................................................

We will update the system repository index by using the following command.

sudo apt update -y


Step #1:Creating Prometheus System Users and Directory

Create a system user for Prometheus using below command:
sudo useradd --no-create-home --shell /bin/false prometheus

Create the directories in which we will be storing our configuration files and libraries:
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus

Set the ownership of the /var/lib/prometheus directory with below command:
sudo chown prometheus:prometheus /var/lib/prometheus


Step #2:Download Prometheus Binary File

Using below command we can download Prometheus, here we are downloading Prometheus 2.46 version, you use above link to download specific version.
Lets create a folder say /tmp :
cd /tmp/ 

Download the Prometheus setup using wget
wget https://github.com/prometheus/prometheus/releases/download/v2.46.0/prometheus-2.46.0.linux-amd64.tar.gz


Extract the files using tar :
tar -xvf prometheus-2.46.0.linux-amd64.tar.gz

Move the configuration file and set the owner to the prometheus user:
cd prometheus-2.46.0.linux-amd64
sudo mv console* /etc/prometheus
sudo mv prometheus.yml /etc/prometheus
sudo chown -R prometheus:prometheus /etc/prometheus
 Now, Move the binaries and set the owner:
sudo mv prometheus /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/prometheus


Step #3:Prometheus configuration file

We have already copied /opt/prometheus-2.26.0.linux-amd64/prometheus.yml file /etc/prometheus directory, verify if it present and should look like below and modify it as per your requirement.
sudo vi /etc/prometheus/prometheus.yml

(Don’t change any config yet)

Step #4:Creating Prometheus Systemd file
Create the service file using below command:
sudo vi /etc/systemd/system/prometheus.service

...........................................;

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target

.............................................

Now, Reload systemd:
sudo systemctl daemon-reload

Start, Enable, Status Prometheus service:
sudo systemctl start prometheus
sudo systemctl enable prometheus
sudo systemctl status prometheus



Step #5:Accessing Prometheus in Browser
Now as Prometheus installation and configuration is set up and it is ready to use we can access its services via web interface. Also check weather port 9090 is UP in firewall.

Now Prometheus service is ready to run and we can access it from any web browser.
http://server-IP-or-Hostname:9090

Step #6:Download Node Exporter

Go to the official release page of Prometheus Node Exporter and copy the link of the latest version of the Node Exporter package according to your OS type.
cd /tmp

Now lets run the copied URL with wget command
wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz

Unzip the downloaded the file using below command
sudo tar xvfz node_exporter-*.*-amd64.tar.gz


Move the binary file of node exporter to /usr/local/bin location
sudo mv node_exporter-*.*-amd64/node_exporter /usr/local/bin/

Create a node_exporter user to run the node exporter service
sudo useradd -rs /bin/false node_exporter

Step #7:Creating Node Exporter Systemd service
Create a node_exporter service file in the /etc/systemd/system directory
sudo vi /etc/systemd/system/node_exporter.service

..............................................

[Unit]

Description=Node Exporter

After=network.target

 
[Service]

User=node_exporter

Group=node_exporter

Type=simple

ExecStart=/usr/local/bin/node_exporter


[Install]

WantedBy=multi-user.target

.................................................

Now lets start and enable the node_exporter service using below commands
sudo systemctl daemon-reload
sudo systemctl start node_exporter
sudo systemctl enable node_exporter
sudo systemctl status node_exporter



Step #8:Configure the Node Exporter as a Prometheus target
 Now to scrape the node_exporter lets instruct the Prometheus by making a minor change in prometheus.yml file
So go to etc/prometheus and open prometheus.yml
sudo vi /etc/prometheus/prometheus.yml

..................................................

- job_name: 'Node_Exporter'

    scrape_interval: 5s

    static_configs:

      - targets:[‘<Server_IP_of_Node_Exporter_Machine>:9100']

...................................................

Now restart the Prometheus Service
sudo systemctl restart prometheus

Hit the URL in your web browser to check weather our target is successfully scraped by Prometheus or not

http://server-IP:9100/metrics


Step #9:Install Grafana on Ubuntu 22.04 LTS

Now lets Install Grafana for wonderful dashboards and data visualization for monitoring systems, servers, services, etc
Add the Grafana GPG key in Ubuntu using wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -


Next, add the Grafana repository to your APT sources:
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"


Refresh your APT cache to update your package lists:
sudo apt update

You can now proceed with the installation:
sudo apt install grafana 

[ Note: if any issue while installing grafana: run below command: 
sudo apt update 
 
sudo apt install -y software-properties-common 
 
sudo add-apt-repository "deb 
https://packages.grafana.com/oss/deb stable main" 
 
sudo wget -q -O /usr/share/keyrings/grafana.key https://packages.grafana.com/gpg.key 
 

echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list > /dev/null 

sudo apt update 

sudo apt install grafana -y 
]

Once Grafana is installed, use systemctl to start the Grafana server:
sudo systemctl start grafana-server

Next, verify that Grafana is running by checking the service’s status:
sudo systemctl enable grafana-server
sudo systemctl status grafana-server





To access Grafana Dashboard open your favorite browser, type server IP or Name followed by grafana default port 3000.
http://your_ip:3000

Here you can see Login page of Grafana now you will have to login with below Grafana default UserName and Password.
Username – admin
Password – admin


Now, will create MicroService Node.js App which contains Payment and Balance Service.   Step 1: Install Node.js and Dependencies 
cd /tmp
mkdir microservice-monitoring && cd microservice-monitoring
sudo apt install npm
npm init -y
npm install express prom-client cors


Step 2: Create the Node.js Application


Create a file named server.js:

sudo vi server.js

............................................................

const express = require("express");
const client = require("prom-client");
const cors = require("cors");

const app = express();
app.use(cors());

// Prometheus metrics setup
const register = new client.Registry();
client.collectDefaultMetrics({ register }); // Collect default system metrics (optional)

const httpRequestDurationMicroseconds = new client.Histogram({
  name: "http_request_duration_seconds",
  help: "Duration of HTTP requests in seconds",
  labelNames: ["service", "method"],
  buckets: [0.1, 0.5, 1, 2, 5]
});
register.registerMetric(httpRequestDurationMicroseconds);

// Payment Service
app.get("/pay", (req, res) => {
  const start = Date.now();
  setTimeout(() => {
    const duration = (Date.now() - start) / 1000;
    httpRequestDurationMicroseconds
      .labels("payment", "GET")
      .observe(duration);

    res.send("Payment processed!");
  }, Math.random() * 1000); // Simulate latency
});

// Balance Service
app.get("/balance", (req, res) => {
  const start = Date.now();
  setTimeout(() => {
    const duration = (Date.now() - start) / 1000;
    httpRequestDurationMicroseconds
      .labels("balance", "GET")
      .observe(duration);

    res.send("Balance: $1000");
  }, Math.random() * 500); // Simulate latency
});

// Prometheus Metrics Endpoint
app.get("/metrics", async (req, res) => {
  res.set("Content-Type", register.contentType);
  res.end(await register.metrics());
});

// Start server on port 8001
app.listen(8001, () => {
  console.log("Server running on port 8001");
});


..........................................................

Step 3: Run the Application

node server.js

This command allows your process to continue running in background after you log out or close the terminal.

nohup node server.js &


Now, again Configure prometheus.yml and add :

sudo vi /etc/prometheus/prometheus.yml

scrape_configs:
  - job_name: "microservices"
    static_configs:
      - targets: [“<hostname-service_ip>:8001”]












Now, Restart the Prometheus Server 


sudo systemctl restart prometheus


This will:
Start a simple backend
Expose:
http://<hostname-service_ip>:8001/pay
http://<hostname-service_ip>:8001/balance
http://<hostname-service_ip>/metrics (for Prometheus)

 curl http://localhost:8001/metrics 















Set Up Grafana to Visualize Metrics

Now, let's set up Grafana to visualize the metrics.
Log in to Grafana: Open Grafana in your browser at http://localhost:3000 (default username is admin and password is admin).
Add Prometheus as a Data Source:
In the left sidebar, click on the gear icon (⚙️) to go to Configuration.
Click on Data Sources and then click Add data source.
Select Prometheus from the list.
In the HTTP section, set the URL to your Prometheus server, for example: http://localhost:9090
Click Save & Test to verify the connection.


Create a Dashboard:
In the left sidebar, click the plus icon (+) and select Dashboard.  Creating Grafana Dashboard to Monitor Linux Server
Now lets build a dashboard in Grafana so then it will able to reflect the metrics of the Ubuntu system (CPU, Memory etc)
So we will use 14513 to import from Grafana.com, Lets come to Grafana Home page and you can see a “+” icon. Click on that and select “Import”
Now provide the Grafana.com Dashboard ID which is 14513 and click on Load
There you are done with the setup. Now your Dashboard is running up!.


To check for Balance and Payment Service http request and application latency.   In the left sidebar, click the plus icon (+) and select Dashboard.
Click Add new panel.


In query section: add 
http_requests_total_count
or
http_request_duration_seconds_count












Now, You should have successfully implemented Infrastructure Monitoring using Prometheus and Grafana on AWS.



Note: 
Basic Troubleshooting command:   sudo netstat -tulnp | grep 3001
ps aux | grep node
curl -v http://localhost:3001/metrics
DEBUG=* node server.js
sudo journalctl -u grafana-server -f

Run the following command to check for errors in your Prometheus config:
prometheus --config.file=/etc/prometheus/prometheus.yml --log.level=debug
If the issue persists, check logs for a more specific error message:
journalctl -u prometheus --no-pager | tail -20















