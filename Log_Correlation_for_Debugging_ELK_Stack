provider "aws" {
  region = "us-east-2"
}

resource "aws_security_group" "elk_sg" {
  name        = "elk_sg"
  description = "Allow traffic for ELK"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow SSH
  }

  ingress {
    from_port   = 5601
    to_port     = 5601
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow Kibana UI
  }

  ingress {
    from_port   = 9200
    to_port     = 9200
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow Elasticsearch API
  }

  ingress {
    from_port   = 5044
    to_port     = 5044
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow Filebeat Logs
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "elk_node" {
  ami           = "ami-0cb91c7de36eed2cb" # Ubuntu AMI
  instance_type = "t2.medium"
  key_name      = "elk"  # change as per your key
  security_groups = [aws_security_group.elk_sg.name]
  tags = {
    Name = "elk-node"
  }
  user_data = <<-EOF
    #!/bin/bash
    sudo apt update -y
    sudo apt install -y openjdk-11-jre curl

    # Install Elasticsearch
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
    sudo apt update -y && sudo apt install -y elasticsearch

    # Configure Elasticsearch
    echo "network.host: 0.0.0.0" | sudo tee -a /etc/elasticsearch/elasticsearch.yml
    #echo "cluster.name: my-cluster" | sudo tee -a /etc/elasticsearch/elasticsearch.yml
    echo "discovery.type: single-node" | sudo tee -a /etc/elasticsearch/elasticsearch.yml
    sudo systemctl enable elasticsearch && sudo systemctl start elasticsearch

    # Install Kibana
    sudo apt install -y kibana
    echo "server.port: 5601" | sudo tee -a /etc/kibana/kibana.yml
    echo "server.host: 0.0.0.0" | sudo tee -a /etc/kibana/kibana.yml
    echo "elasticsearch.hosts: [\"http://localhost:9200\"]" | sudo tee -a /etc/kibana/kibana.yml
    sudo systemctl enable kibana && sudo systemctl start kibana

    # Install Logstash
    sudo apt install -y logstash
    echo '
    input {
      beats {
        port => "5044"
      }
    }
    filter {
      json {
        source => "message"
      }
    }
    output {
      elasticsearch {
        hosts => ["http://localhost:9200"]
        index => "logs-%%{+YYYY.MM.dd}"
      }
    }
    ' | sudo tee /etc/logstash/conf.d/logstash.conf
    sudo systemctl enable logstash && sudo systemctl start logstash

    echo "ELK stack setup completed!"
  EOF
}

resource "aws_instance" "app_node" {
  ami           = "ami-0cb91c7de36eed2cb" # Ubuntu AMI
  instance_type = "t2.micro"
  key_name      = "elk"
  security_groups = [aws_security_group.elk_sg.name]
  tags = {
    Name = "app-node"
  }
  user_data = <<-EOF
    #!/bin/bash
    sudo apt update -y

    # Install Filebeat
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
    sudo apt update -y && sudo apt install -y filebeat

    # Configure Filebeat
    echo '
    filebeat.inputs:
      - type: log
        enabled: true
        paths:
          - /var/log/sample_app.log

       # Capture system logs
      - type: log
        enabled: true
        paths:
          - /var/log/syslog  # Ubuntu system logs
          - /var/log/messages # Amazon Linux system logs

    output.logstash:
      hosts: ["${aws_instance.elk_node.private_ip}:5044"]
    ' | sudo tee /etc/filebeat/filebeat.yml

    sudo systemctl enable filebeat && sudo systemctl start filebeat

    # Install Sample Node.js App
    sudo apt install -y nodejs npm
    mkdir /home/ubuntu/app && cd /home/ubuntu/app
    echo 'console.log("Sample App Running"); setInterval(() => console.log("Log Entry"), 5000);' > app.js
    node app.js > /var/log/sample_app.log 2>&1 &
  EOF
}

output "elk_ip" {
  value = aws_instance.elk_node.public_ip
}

output "app_ip" {
  value = aws_instance.app_node.public_ip
}

output "elk_ssh" {
  value = "ssh -i my-key.pem ubuntu@${aws_instance.elk_node.public_ip}"
}

output "app_ssh" {
  value = "ssh -i my-key.pem ubuntu@${aws_instance.app_node.public_ip}"
}
